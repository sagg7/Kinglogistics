(()=>{const e=$("#conditionBackground"),o=$(".condition-canvas");let t,n;const a=()=>{t.forEach((function(e){((e,o,a)=>{let i=n;switch(i.save(),i.beginPath(),i.fillStyle="#C80000",i.strokeStyle="#C80000",e){case"impact":i.arc(o.x,o.y,8,0,2*Math.PI),i.stroke(),i.beginPath(),i.arc(o.x,o.y,8,0,2*Math.PI),i.fill();break;case"broken":i.lineWidth=2,i.beginPath(),i.moveTo(o.x-7,o.y-7),i.lineTo(o.x+7,o.y+7),i.moveTo(o.x-7,o.y+7),i.lineTo(o.x+7,o.y-7),i.stroke();break;case"scratch":i.lineWidth=2,i.beginPath(),i.moveTo(o.x-8,o.y+3),i.lineTo(o.x-2,o.y-2),i.lineTo(o.x+2,o.y+2),i.lineTo(o.x+8,o.y-3),i.stroke();break;default:return!1}void 0!==a&&a||t.push({type:e,pos:o}),i.restore()})(e.type,e.pos,!0)}),this)};let i=!1,r=!1,s=!1;const c=()=>{i&&r&&!s&&(s=!0,window.print(),window.history.back())};(()=>{const r=new Image;n=o[0].getContext("2d"),t=$("#conditionData").val(),t=""===t?[]:JSON.parse(t),r.addEventListener("load",(()=>{n.drawImage(r,0,0,760,416),a(),setTimeout((()=>{i=!0,c()}),300)}),!1),r.src=e.val()})(),Promise.all(Array.from(document.images).filter((e=>!e.complete)).map((e=>new Promise((o=>{e.onload=e.onerror=o}))))).then((()=>{$(".masonry_grid").masonry({percentPosition:!0}),setTimeout((()=>{r=!0,c()}),300)}))})();
